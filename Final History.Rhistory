idfBdtm <- DocumentTermMatrix(corpus, control = list(removePunctuation = TRUE,tokenize = BigramTokenizer,stopwords = TRUE, weighting = weightTfIdf))
idfBdtm = removeSparseTerms(idfBdtm, 0.95)
BigramCorpusidf <- as.data.frame(as.matrix(idfBdtm))
idfBdtm <- DocumentTermMatrix(corpus, control = list(removePunctuation = TRUE,tokenize = BigramTokenizer,stopwords = TRUE, weighting = weightTfIdf))
idfBdtm <- DocumentTermMatrix(corpus, control = list(removePunctuation = TRUE,tokenize = BigramTokenizer,stopwords = TRUE, weighting = weightTfIdf))
idfBdtm
idfBdtm = removeSparseTerms(idfBdtm, 0.95)
idfBdtm
BigramCorpusidf <- as.data.frame(as.matrix(idfBdtm))
View(BigramCorpusidf)
BigramCorpusidf <- as.data.frame(as.matrix(idfBdtm))
View(BigramCorpusidf)
bidftrain=BigramCorpusidf[train_ind,]
bidftest=BigramCorpusidf[-train_ind,]
StandardbidfRM = glm(deceptive~ ., data=bidftrain, family="binomial")
PredictbidfRM = predict(BigramRModel, newdata=bidftest, type="response")
BigramCorpusidf$deceptive <- deceptive.opinion$deceptive
bidftrain=BigramCorpusidf[train_ind,]
bidftest=BigramCorpusidf[-train_ind,]
StandardbidfRM = glm(deceptive~ ., data=bidftrain, family="binomial")
PredictbidfRM = predict(BigramRModel, newdata=bidftest, type="response")
table(bidftest$deceptive, PredictbidfRM > 0.5)
BigramCorpusidf <- as.data.frame(as.matrix(idfBdtm))
BigramCorpusidf$deceptive <- deceptive.opinion$deceptive
bidftrain=BigramCorpusidf[train_ind,]
bidftest=BigramCorpusidf[-train_ind,]
StandardbidfRM = glm(deceptive~ ., data=bidftrain, family="binomial")
PredictbidfRM = predict(StandardbidfRM, newdata=bidftest, type="response")
table(bidftest$deceptive, PredictbidfRM > 0.5)
bidftrain=BigramCorpusidf[train_ind,]
bidftest=BigramCorpusidf[-train_ind,]
StandardbidfRM = glm(deceptive~ ., data=bidftrain, family="binomial")
PredictbidfRM = predict(StandardbidfRM, newdata=bidftest, type="response")
table(bidftest$deceptive, PredictbidfRM > 0.5)
table(bidftest$deceptive, PredictbidfRM > 0.5)
table(test2$deceptive, PredictSRM2 > 0.5)
table(idftest$deceptive, PredictidfRM > 0.5)
table(chartest$deceptive, PredictcharRM > 0.5)
table(test$deceptive, PredictSRM > 0.5)
table(BStest, PredictBRM > 0.5)
table(BStest, BigramRModel > 0.5)
BigramRModel = glm(deceptive~ ., data=BStrain, family="binomial")
table(BStest$deceptive, PredictBRM > 0.5)
table(test2$deceptive, PredictSRM2 > 0.5)
testCorpuscharandpunct <- as.data.frame(as.matrix(spdtm))
colnames(testCorpuscharandpunct) <- make.names(colnames(testCorpuscharandpunct))
testCorpuscharandpunct$Length <- nchar(as.character(deceptive.opinion$text))
View(sparsepunctdtm)
View(testCorpus2)
View(PoScorpus)
testCorpuscharandpunct$`!` <- PoScorpus$`!`
View(testCorpuscharandpunct)
testCorpuscharandpunct$deceptive = deceptive.opinion$deceptive
charpuncttrain=BigramCorpusidf[train_ind,]
charpuncttest=BigramCorpusidf[-train_ind,]
StandardcharpunctRM = glm(deceptive~ ., data=charpuncttrain, family="binomial")
PredictcharpunctRM = predict(StandardcharpunctRM, newdata=charpuncttest, type="response")
table(charpuncttest$deceptive, StandardcharpunctRM > 0.5)
table(charpuncttest$deceptive, PredictcharpunctRM > 0.5)
View(x)
rm(train_indS)
rm(testString)
rm(smp_sizS)
library(pROC)
table(test$deceptive, PredictSVM > 0.5)
charpunctSVM =svm(deception~., data = charpuncttrain);
predictcharpunctSVM = predict(charpunctSVM, charpuncttest)
table(charpuncttrain$deceptive, predictcharpunctSVM > 0.5)
charpunctSVM = reviews.svm = svm(deception~., data = charpunctSVM)
charpunctSVM =svm(deception~., data = charpuncttrain);
predictcharpunctSVM = predict(charpunctSVM, charpuncttest)
table(charpuncttrain$deceptive, predictcharpunctSVM > 0.5)
charpunctSVM = reviews.svm = svm(deception~., data = charpunctSVM);
charpunctSVM =svm(deception~., data = charpuncttrain);
predictcharpunctSVM = predict(charpunctSVM, charpuncttest);
table(charpuncttrain$deceptive, predictcharpunctSVM > 0.5)
library(e1071)
detach("package:e1071", unload = TRUE)
library(e1071)
charpunctSVM = reviews.svm = svm(deception~., data = charpunctSVM);
charpunctSVM =svm(deception~., data = charpuncttrain);
predictcharpunctSVM = predict(charpunctSVM, charpuncttest);
table(charpuncttrain$deceptive, predictcharpunctSVM > 0.5)
StandardSVM = reviews.svm = svm(deception~., data = train);
charpunctSVM =svm(deception~., data = charpuncttrain)
charpunctSVM =svm(deceptive.opinion~., data = charpuncttrain);
predictcharpunctSVM = predict(charpunctSVM, charpuncttest);
table(charpuncttrain$deceptive, predictcharpunctSVM > 0.5)
charpunctSVM =svm(deceptive~., data = charpuncttrain)
predictcharpunctSVM = predict(charpunctSVM, charpuncttest)
table(charpuncttrain$deceptive, predictcharpunctSVM > 0.5)
charpunctSVM =svm(deceptive~., data = charpuncttrain)
predictcharpunctSVM = predict(charpunctSVM, charpuncttest)
table(charpuncttrain$deceptive, predictcharpunctSVM > 0.5)
charpunctSVM =svm(deceptive~., data = charpuncttrain)
predictcharpunctSVM = predict(charpunctSVM, charpuncttest)
table(charpuncttrain$deceptive, StandardcharpunctRM > 0.5)
charpunctSVM =svm(deceptive~., data = charpuncttrain)
predictcharpunctSVM = predict(charpunctSVM, charpuncttest)
table(charpuncttest$deceptive, StandardcharpunctRM > 0.5)
charpunctSVM =svm(deceptive~., data = charpuncttrain)
predictcharpunctSVM = predict(charpunctSVM, charpuncttest)
table(charpuncttest$deceptive, predictcharpunctSVM > 0.5)
x$topic_level_id <- unique_identifier(x, fields = c("doc_id", "paragraph_id", "sentence_id"))
View(x)
dtf <- document_term_frequencies(dtf, document = "topic_level_id", term = "lemma")
head(dtf)
dtf <- subset(x, upos %in% c("NOUN", "ADJ"))
dtf <- document_term_frequencies(dtf, document = "topic_level_id", term = "lemma")
head(dtf)
rm(AnnotatedMatrix)
View(deceptivetdm)
View(dtf)
table(chartest$deceptive, StandardSparse > 0.5)
table(chartest$deceptive, PredictSparse > 0.5)
BiUnicorpus <- rbind(testCorpus, BSparse)
BiUnicorpus <- rbind(testCorpus, Btestcorpus)
View(annotationText)
View(annotationText)
ddf
library(dplyr)
library(topicmodels)
library(dplyr)
library(wordcloud)
library(tokenizers)
library(tidyselect)
library(tm)
library(tidyr)
library(glm2)
library(openNLP)
library(dplyr)
library(gamlr)
library(SnowballC)
library(tm)
library(tokenizers)
library(wordcloud)
library(qdap)
library(openNLPdata)
library(udpipe)
library(dplyr)
stats <- txt_freq(dx$upos)
stats$key <- factor(stats$key, levels = rev(stats$key))
barchart(key ~ freq, data = stats, col = "cadetblue",
main = "UPOS (Universal Parts of Speech for deceptive)\n frequency of occurrence",
xlab = "Freq")
stats <- txt_freq(tx$upos)
stats$key <- factor(stats$key, levels = rev(stats$key))
barchart(key ~ freq, data = stats, col = "cadetblue",
main = "UPOS (Universal Parts of Speech for truthful)\n frequency of occurrence",
xlab = "Freq")
if (file.exists("english-ud-2.0-170801.udpipe"))
ud_model <- udpipe_load_model(file = "english-ud-2.0-170801.udpipe") else {
ud_model <- udpipe_download_model(language = "english")
ud_model <- udpipe_load_model(ud_model$file_model)
}
stats <- txt_freq(dx$upos)
stats$key <- factor(stats$key, levels = rev(stats$key))
barchart(key ~ freq, data = stats, col = "cadetblue",
main = "UPOS (Universal Parts of Speech for deceptive)\n frequency of occurrence",
xlab = "Freq")
stats <- txt_freq(tx$upos)
stats$key <- factor(stats$key, levels = rev(stats$key))
barchart(key ~ freq, data = stats, col = "cadetblue",
main = "UPOS (Universal Parts of Speech for truthful)\n frequency of occurrence",
xlab = "Freq")
library(lattice)
stats <- txt_freq(dx$upos)
stats$key <- factor(stats$key, levels = rev(stats$key))
barchart(key ~ freq, data = stats, col = "cadetblue",
main = "UPOS (Universal Parts of Speech for deceptive)\n frequency of occurrence",
xlab = "Freq")
stats <- txt_freq(tx$upos)
stats$key <- factor(stats$key, levels = rev(stats$key))
barchart(key ~ freq, data = stats, col = "cadetblue",
main = "UPOS (Universal Parts of Speech for truthful)\n frequency of occurrence",
xlab = "Freq")
dtf2 <- subset(x, upos %in% c("NOUN","VERB","PRON"))
xdtm2 <- document_term_frequencies(dtf[, c("doc_id", "token")])
xdtm2 <- dtm_remove_sparseterms(xdtm2, sparsity = 0.95)
PoSNVPcorpus <- as.data.frame(as.matrix(xdtm))
dtf2 <- subset(x, upos %in% c("NOUN","VERB","PRON"))
xdtm2 <- document_term_frequencies(dtf[, c("doc_id", "token")])
xdtm2 <- dtm_remove_sparseterms(xdtm2, sparsity = 0.95)
PoSNVPcorpus <- as.data.frame(as.matrix(xdtm2))
dtf2 <- subset(x, upos %in% c("NOUN","VERB","PRON"))
xdtm2 <- document_term_frequencies(dtf2[, c("doc_id", "token")])
xdtm2 <- dtm_remove_sparseterms(xdtm2, sparsity = 0.95)
PoSNVPcorpus <- as.data.frame(as.matrix(xdtm2))
dtf2 <- subset(x, upos %in% c("NOUN","VERB","PRON"))
xdtm2 <- document_term_frequencies(dtf2[, c("doc_id", "token")])
xdtm2 <- dtm_remove_sparseterms(xdtm2, sparsity = 0.95)
PoSNVPcorpus <- as.data.frame(as.matrix(xdtm2))
dtf2 <- subset(x, upos %in% c("NOUN","VERB","PRON"))
xdtm2 <- document_term_frequencies(dtf2[, c("doc_id", "token")])
xdtm2 <- dtm_remove_sparseterms(xdtm2, sparsity = 0.95)
PoSNVPcorpus <- as.data.frame(as.matrix(xdtm2))
dtf2 <- subset(x, upos %in% c("NOUN","VERB","PRON"))
xdtm2 <- document_term_frequencies(dtf2[, c("doc_id", "token")])
xdtm2 <- document_term_matrix(xdtm2)
xdtm2 <- dtm_remove_sparseterms(xdtm2, sparsity = 0.95)
PoSNVPcorpus <- as.data.frame(as.matrix(xdtm2))
View(PoSNVPcorpus)
PoSNVPcorpus$deceptive <- deceptive.opinion$deceptive
NVPtrain=PoSNVPcorpus[train_ind,]
NVPtest=PoSNVPcorpus[-train_ind,]
NVPRM = glm(deceptive~ ., data=NVPtrain, family="binomial")
PredictNVPRM = predict(NVPRM, newdata=NVPtest, type="response")
table(NVPtest$deceptive, PredictNVPRM > 0.5)
dtf2 <- subset(x, upos %in% c("NOUN","VERB"))
xdtm2 <- document_term_frequencies(dtf2[, c("doc_id", "token")])
xdtm2 <- document_term_matrix(xdtm2)
xdtm2 <- dtm_remove_sparseterms(xdtm2, sparsity = 0.95)
PoSNVPcorpus <- as.data.frame(as.matrix(xdtm2))
resultsNVP_df = summary.glm(NVPRM)
dtf2 <- subset(x, upos %in% c("NOUN","VERB"))
xdtm2 <- document_term_frequencies(dtf2[, c("doc_id", "token")])
xdtm2 <- document_term_matrix(xdtm2)
xdtm2 <- dtm_remove_sparseterms(xdtm2, sparsity = 0.95)
PoSNVcorpus <- as.data.frame(as.matrix(xdtm2))
dtf2 <- subset(x, upos %in% c("NOUN","VERB"))
xdtm2 <- document_term_frequencies(dtf2[, c("doc_id", "token")])
xdtm2 <- document_term_matrix(xdtm2)
xdtm2 <- dtm_remove_sparseterms(xdtm2, sparsity = 0.95)
PoSNVPcorpus <- as.data.frame(as.matrix(xdtm2))
PoSNVcorpus$deceptive <- deceptive.opinion$deceptive
dtf2 <- subset(x, upos %in% c("NOUN","VERB"))
xdtm2 <- document_term_frequencies(dtf2[, c("doc_id", "token")])
xdtm2 <- document_term_matrix(xdtm2)
xdtm2 <- dtm_remove_sparseterms(xdtm2, sparsity = 0.95)
PoSNVcorpus <- as.data.frame(as.matrix(xdtm2))
PoSNVcorpus$deceptive <- deceptive.opinion$deceptive
dtf2 <- subset(x, upos %in% c("NOUN","VERB"))
xdtm2 <- document_term_frequencies(dtf2[, c("doc_id", "token")])
xdtm2 <- document_term_matrix(xdtm2)
xdtm2 <- dtm_remove_sparseterms(xdtm2, sparsity = 0.95)
PoSNVcorpus <- as.data.frame(as.matrix(xdtm2))
View(PoSNVcorpus)
PoSNVcorpus$deceptive <- deceptive.opinion$deceptive
View(PoSNVcorpus)
PoSNVPcorpus$deceptive <- deceptive.opinion$deceptive
rm(PoSNVcorpus,PoSNVPcorpus)
dtf2 <- subset(x, upos %in% c("NOUN","VERB"))
xdtm2 <- document_term_frequencies(dtf2[, c("doc_id", "token")])
xdtm2 <- document_term_matrix(xdtm2)
xdtm2 <- dtm_remove_sparseterms(xdtm2, sparsity = 0.95)
PoSNVcorpus <- as.data.frame(as.matrix(xdtm2))
dtf2 <- subset(x, upos %in% c("NOUN","VERB"))
xdtm2 <- document_term_frequencies(dtf2[, c("doc_id", "token")])
xdtm2 <- document_term_matrix(xdtm2)
xdtm2 <- dtm_remove_sparseterms(xdtm2, sparsity = 0.95)
PoSNVPcorpus <- as.data.frame(as.matrix(xdtm2))
PoSNVPcorpus$deceptive <- deceptive.opinion$deceptive
PoSNVPcorpus$deceptive <- deceptive.opinion$deceptive
library(topicmodels)
library(dplyr)
library(wordcloud)
library(tokenizers)
library(tidyselect)
library(tm)
library(tidyr)
library(glm2)
library(openNLP)
library(dplyr)
library(gamlr)
library(SnowballC)
library(tm)
library(tokenizers)
library(wordcloud)
library(qdap)
library(openNLPdata)
library(udpipe)
if (file.exists("english-ud-2.0-170801.udpipe"))
ud_model <- udpipe_load_model(file = "english-ud-2.0-170801.udpipe") else {
ud_model <- udpipe_download_model(language = "english")
ud_model <- udpipe_load_model(ud_model$file_model)
}
dtf2 <- subset(x, upos %in% c("NOUN","VERB","PRON"))
xdtm2 <- document_term_frequencies(dtf2[, c("doc_id", "token")])
xdtm2 <- document_term_matrix(xdtm2)
xdtm2 <- dtm_remove_sparseterms(xdtm2, sparsity = 0.95)
PoSNVPcorpus <- as.data.frame(as.matrix(xdtm2))
PoSNVPcorpus$deceptive <- deceptive.opinion$deceptive
dtf2 <- subset(x, upos %in% c("NOUN","VERB","PRON"))
xdtm2 <- document_term_frequencies(dtf2[, c("doc_id", "token")])
xdtm2 <- document_term_matrix(xdtm2)
xdtm2 <- dtm_remove_sparseterms(xdtm2, sparsity = 0.95)
PoSNVcorpus <- as.data.frame(as.matrix(xdtm2))
PoSNVcorpus$deceptive <- deceptive.opinion$deceptive
NVtrain=PoSNVcorpus[train_ind,]
NVtest=PoSNVcorpus[-train_ind,]
NVRM = glm(deceptive~ ., data=NVtrain, family="binomial")
PredictNVRM = predict(NVPRM, newdata=NVtest, type="response")
table(NVtest$deceptive, PredictNVRM > 0.5)
View(PoSNVPcorpus)
resultsNV_df = summary.glm(NVRM)
stats <- subset(dx, upos %in% c("PRON"))
stats <- txt_freq(stats$token)
stats$key <- factor(stats$key, levels = rev(stats$key))
barchart(key ~ freq, data = head(stats, 20), col = "cadetblue",
main = "Most occurring Punctuation in deceptive", xlab = "Freq")
stats <- subset(tx, upos %in% c("PRON"))
stats <- txt_freq(stats$token)
stats$key <- factor(stats$key, levels = rev(stats$key))
barchart(key ~ freq, data = head(stats, 20), col = "cadetblue",
main = "Most occurring Punctuation in truthful", xlab = "Freq")
library(lattice)
stats <- subset(dx, upos %in% c("PRON"))
stats <- txt_freq(stats$token)
stats$key <- factor(stats$key, levels = rev(stats$key))
barchart(key ~ freq, data = head(stats, 20), col = "cadetblue",
main = "Most occurring Punctuation in deceptive", xlab = "Freq")
stats <- subset(tx, upos %in% c("PRON"))
stats <- txt_freq(stats$token)
stats$key <- factor(stats$key, levels = rev(stats$key))
barchart(key ~ freq, data = head(stats, 20), col = "cadetblue",
main = "Most occurring Punctuation in truthful", xlab = "Freq")
View(deceptiveRev)
xidf = dtm_tfidf(xdtm2)
idfPoSNVcorpus <- as.data.frame(as.matrix(xidf))
idfPoSNVcorpus$deceptive <- deceptive.opinion$deceptive
View(idfdtm)
View(idftest)
xidf
dim(xidf)
xdtm2
dtf2 <- subset(x, upos %in% c("NOUN","VERB","PRON"))
xdtm2 <- document_term_frequencies(dtf2[, c("doc_id", "token")])
xdtm2 <- document_term_matrix(xdtm2)
xdtm2 <- dtm_remove_sparseterms(xdtm2, sparsity = 0.95)
xidf = dtm_tfidf(xdtm2)
idfPoSNVcorpus <- as.data.frame(as.matrix(xidf))
idfPoSNVcorpus$deceptive <- deceptive.opinion$deceptive
resultsCP_df = summary.glm(StandardcharpunctRM)
testCorpuscharandpunct <- as.data.frame(as.matrix(spdtm))
colnames(testCorpuscharandpunct) <- make.names(colnames(testCorpuscharandpunct))
testCorpuscharandpunct$Length <- nchar(as.character(deceptive.opinion$text))
testCorpuscharandpunct$`!` <- PoScorpus$`!`
testCorpuscharandpunct$deceptive = deceptive.opinion$deceptive
charpuncttrain=testCorpuscharandpunct[train_ind,]
charpuncttest=testCorpuscharandpunct[-train_ind,]
StandardcharpunctRM = glm(deceptive~ ., data=charpuncttrain, family="binomial")
PredictcharpunctRM = predict(StandardcharpunctRM, newdata=charpuncttest, type="response")
table(charpuncttest$deceptive, PredictcharpunctRM > 0.5)
resultsCP_df = summary.glm(StandardcharpunctRM)
resultsBidf_df = summary.glm(standardbidfRM)
View(testCorpus2)
idfBdtm <- DocumentTermMatrix(corpus, control = list(removePunctuation = TRUE,tokenize = BigramTokenizer,stopwords = TRUE, weighting = weightTfIdf))
idfBdtm <- DocumentTermMatrix(corpus, control = list(removePunctuation = TRUE,tokenize = BigramTokenizer,stopwords = TRUE, weighting = weightTfIdf))
idfBdtm = removeSparseTerms(idfBdtm, 0.95)
BigramCorpusidf <- as.data.frame(as.matrix(idfBdtm))
BigramCorpusidf$deceptive <- deceptive.opinion$deceptive
bidftrain=BigramCorpusidf[train_ind,]
bidftest=BigramCorpusidf[-train_ind,]
StandardbidfRM = glm(deceptive~ ., data=bidftrain, family="binomial")
PredictbidfRM = predict(BigramRModel, newdata=bidftest, type="response")
table(bidftest$deceptive, PredictbidfRM > 0.5)
BigramCorpusidf <- as.data.frame(as.matrix(idfBdtm))
View(bidftrain)
rm(idfBdtm)
idfBdtm <- DocumentTermMatrix(corpus, control = list(removePunctuation = TRUE,tokenize = BigramTokenizer,stopwords = TRUE, weighting = weightTfIdf))
idfBdtm = removeSparseTerms(idfBdtm, 0.95)
BigramCorpusidf <- as.data.frame(as.matrix(idfBdtm))
BigramCorpusidf$deceptive <- deceptive.opinion$deceptive
bidftrain=BigramCorpusidf[train_ind,]
bidftest=BigramCorpusidf[-train_ind,]
StandardbidfRM = glm(deceptive~ ., data=bidftrain, family="binomial")
PredictbidfRM = predict(BigramRModel, newdata=bidftest, type="response")
table(bidftest$deceptive, PredictbidfRM > 0.5)
BigramCorpusidf <- as.data.frame(as.matrix(idfBdtm))
View(idfBdtm)
View(idfBdtm)
View(BigramCorpusidf)
View(BStest)
idfBdtm = removeSparseTerms(idfBdtm, 0.95)
BigramCorpusidf <- as.data.frame(as.matrix(idfBdtm))
BigramCorpusidf$deceptive <- deceptive.opinion$deceptive
bidftrain=BigramCorpusidf[train_ind,]
bidftest=BigramCorpusidf[-train_ind,]
StandardbidfRM = glm(deceptive~ ., data=bidftrain, family="binomial")
PredictbidfRM = predict(BigramRModel, newdata=bidftest, type="response")
table(bidftest$deceptive, PredictbidfRM > 0.5)
BigramCorpusidf <- as.data.frame(as.matrix(idfBdtm))
idfBdtm = removeSparseTerms(idfBdtm, 0.95)
BigramCorpusidf <- as.data.frame(as.matrix(idfBdtm))
sort(colSums(idfBdtm))
BigramCorpusidf$deceptive <- deceptive.opinion$deceptive
bidftrain=BigramCorpusidf[train_ind,]
bidftest=BigramCorpusidf[-train_ind,]
StandardbidfRM = glm(deceptive~ ., data=bidftrain, family="binomial")
PredictbidfRM = predict(BigramRModel, newdata=bidftest, type="response")
table(bidftest$deceptive, PredictbidfRM > 0.5)
BigramCorpusidf <- as.data.frame(as.matrix(idfBdtm))
idfBdtm = removeSparseTerms(idfBdtm, 0.95)
BigramCorpusidf <- as.data.frame(as.matrix(idfBdtm))
sort(colSums(idfBdtm))
BigramCorpusidf$deceptive <- deceptive.opinion$deceptive
bidftrain=BigramCorpusidf[train_ind,]
bidftest=BigramCorpusidf[-train_ind,]
StandardbidfRM = glm(deceptive~ ., data=bidftrain, family="binomial")
PredictbidfRM = predict(PredictbidfRM, newdata=bidftest, type="response")
table(bidftest$deceptive, PredictbidfRM > 0.5)
BigramCorpusidf <- as.data.frame(as.matrix(idfBdtm))
idfBdtm = removeSparseTerms(idfBdtm, 0.95)
BigramCorpusidf <- as.data.frame(as.matrix(idfBdtm))
sort(colSums(idfBdtm))
BigramCorpusidf$deceptive <- deceptive.opinion$deceptive
bidftrain=BigramCorpusidf[train_ind,]
bidftest=BigramCorpusidf[-train_ind,]
StandardbidfRM = glm(deceptive~ ., data=bidftrain, family="binomial")
PredictbidfRM = predict(StandardbidfRM, newdata=bidftest, type="response")
table(bidftest$deceptive, PredictbidfRM > 0.5)
BigramCorpusidf <- as.data.frame(as.matrix(idfBdtm))
View(BigramCorpusidf)
idfBdtm <- DocumentTermMatrix(corpus, control = list(tokenize = BigramTokenizer, weighting = weightTfIdf))
idfBdtm = removeSparseTerms(idfBdtm, 0.95)
BigramCorpusidf <- as.data.frame(as.matrix(idfBdtm))
sort(colSums(idfBdtm))
BigramCorpusidf$deceptive <- deceptive.opinion$deceptive
bidftrain=BigramCorpusidf[train_ind,]
bidftest=BigramCorpusidf[-train_ind,]
StandardbidfRM = glm(deceptive~ ., data=bidftrain, family="binomial")
PredictbidfRM = predict(StandardbidfRM, newdata=bidftest, type="response")
table(bidftest$deceptive, PredictbidfRM > 0.5)
BigramCorpusidf <- as.data.frame(as.matrix(idfBdtm))
View(BigramCorpusidf)
idfBdtm <- DocumentTermMatrix(VCorpus(VectorSource(deceptive.opinion$text)), control = list(removePunctuation = TRUE,tokenize = BigramTokenizer,stopwords = TRUE, weighting = weightTfIdf))
View(idfdtm)
idfdtm[["dimnames"]][["Terms"]]
View(BigramCorpusidf)
View(idfBdtm)
idfBdtm[["dimnames"]][["Terms"]]
View(idfBdtm)
idfBdtm[["dimnames"]][["Terms"]]
idfBdtm <- DocumentTermMatrix(VCorpus(VectorSource(deceptive.opinion$text)), control = list(removePunctuation = TRUE,tokenize = BigramTokenizer,stopwords = TRUE))
idfBdtm <- DocumentTermMatrix(idfBdtm), control = list(weighting = weightTfIdf))
idfBdtm = removeSparseTerms(idfBdtm, 0.95)
BigramCorpusidf <- as.data.frame(as.matrix(idfBdtm))
sort(colSums(idfBdtm))
BigramCorpusidf$deceptive <- deceptive.opinion$deceptive
bidftrain=BigramCorpusidf[train_ind,]
bidftest=BigramCorpusidf[-train_ind,]
StandardbidfRM = glm(deceptive~ ., data=bidftrain, family="binomial")
PredictbidfRM = predict(StandardbidfRM, newdata=bidftest, type="response")
table(bidftest$deceptive, PredictbidfRM > 0.5)
View(resultsB_df)
View(resultschar_df)
save(resultsCP_df, file ="resultsCP_df.LDA")
save(resultsCP_df, file ="resultsCP_df.RData")
save(resultsNV_df, file ="resultsNV_df.RData")
save(resultsNV_df, file ="resultsNV_df.LDA")
save(resultsNVP_df, file ="resultsNVP_df.RData")
save(resultsNVP_df, file ="resultsNVP_df.LDA")
resultschar_df = summary.glm(StandardcharRM)
library(lattice)
library(tidyselect)
library(tm)
library(tidyr)
library(glm2)
library(openNLP)
library(dplyr)
library(gamlr)
library(SnowballC)
library(tm)
library(tokenizers)
library(wordcloud)
library(openNLPdata)
library(udpipe)
View(BigramTokenizer)
View(testCorpus)
View(StandardcharpunctRM)
summar(StandardcharpunctRM)
summary(StandardcharpunctRM)
View(BigramRModel)
View(NVPRM)
View(NVRM)
View(StandardcharRM)
table(test$deceptive, PredictSRM > 0.5)
table(Btest$deceptive, PredictBRM > 0.5)
table(BStest$deceptive, PredictBRM > 0.5)
wordcloud(corpus,max.words=150,random.order=FALSE, rot.per=0.15, colors=brewer.pal(8,"Dark2"))
View(x)
View(dtm)
View(testCorpus)
View(NVPtest)
table(test$deceptive, PredictSRM > 0.5)
View(StandardcharRM)
Summary(StandardcharRM)
summary(StandardcharRM)
confusionMatrix(table(test$deceptive, PredictSRM > 0.5))
table(test$deceptive, PredictSRM > 0.5)
table(Btest$deceptive, PredictBRM > 0.5)
table(BStest$deceptive, PredictBRM > 0.5)
table(idftest$deceptive, StandardidfRM > 0.5)
table(idftest$deceptive, PredictidfRM > 0.5)
table(NVtest$deceptive, PredictNVRM > 0.5)
load("~/FYP_LR_Prototype/models/results_df.RData")
View(results_df)
table(test$deceptive, PredictSRM > 0.5)
table(BStest$deceptive, PredictBRM > 0.5)
table(idftest$deceptive, PredictidfRM > 0.5)
View(PosTestcorpus)
View(idfcorpus)
View(PoScorpus)
View(Btestcorpus)
View(BCcorpus)
View(testCorpus)
View(idfcorpus)
View(BStestcorpus)
View(StandardSparse)
View(charSparse)
View(deceptive.opinion)
savehistory("~/FYP_LR_Prototype/Final History.Rhistory")
