return(res)
}
annotated_corpus <- lapply(Tagcorpus, annotateDocuments)
annotated_corpus
View(annotated_corpus)
Postext <- lapply(tagtext, tagpos)
a3 <- lapply(tagtext, tagpos)
a3 <- annotate(Tagcorpus, pos_tag_annotator, a2)
a2 <- lapply(tagtext, wordSentAnnotate)
a3 <- annotate(Tagcorpus, pos_tag_annotator, a2)
tagpos = function(x){annotate(x, pos_tag_annotator, a2)}
a3 <- lapply(tagtext, tagpos)
annotated_corpus[["92"]]
taggedCorpus = VCorpus(VectorSource(annotated_corpus))
taggedCorpus = tm_map(taggedCorpus, content_transformer(tolower))
taggedCorpus = tm_map(taggedCorpus, PlainTextDocument)
taggedCorpus = tm_map(taggedCorpus, removeWords, stopwords("en"))
taggedCorpus = tm_map(taggedCorpus, removePunctuation)
taggedCorpus = tm_map(taggedCorpus, stemDocument)
View(taggedCorpus)
taggedCorpus = VCorpus(VectorSource(deceptive.opinion$text))
taggedCorpus = tm_map(taggedCorpus, content_transformer(tolower))
taggedCorpus = tm_map(taggedCorpus, PlainTextDocument)
taggedCorpus = tm_map(taggedCorpus, removeWords, stopwords("en"))
taggedCorpus = tm_map(taggedCorpus, removePunctuation)
View(taggedCorpus)
annotated_corpus <- lapply(taggedCorpus, annotateDocuments)
View(taggedCorpus)
View(annotated_corpus)
taggedCorpus = VCorpus(VectorSource(deceptive.opinion$text))
taggedCorpus = tm_map(taggedCorpus, content_transformer(tolower))
View(taggedCorpus)
annotated_corpus <- lapply(taggedCorpus, annotateDocuments)
View(annotated_corpus)
colnames(annotated_corpus) <- make.names(colnames(annotated_corpus))
annotated_corpus$deceptive <- deceptive.opinion$deceptive
AnnotatedMatrix <- as.data.frame(as.matrix(annotated_corpus))
View(AnnotatedMatrix)
colnames(AnnotatedMatrix) <- make.names(colnames(AnnotatedMatrix))
AnnotatedMatrix$deceptive <- deceptive.opinion$deceptive
taggedCorpus = VCorpus(VectorSource(deceptive.opinion$text))
taggedCorpus = tm_map(taggedCorpus, content_transformer(tolower))
annotated_corpus <- lapply(taggedCorpus, annotateDocuments)
AnnotatedMatrix <- as.data.frame(as.matrix(annotated_corpus))
View(AnnotatedMatrix)
colnames(AnnotatedMatrix) <- make.names(colnames(AnnotatedMatrix))
AnnotatedMatrix$deceptive <- deceptive.opinion$deceptive
View(Tagcorpus)
taggedCorpus = VCorpus(VectorSource(deceptive.opinion$text))
taggedCorpus <- lapply(taggedCorpus, scan_tokenizer)
annotated_corpus <- lapply(taggedCorpus, annotateDocuments)
AnnotatedMatrix <- as.data.frame(as.matrix(annotated_corpus))
View(AnnotatedMatrix)
colnames(AnnotatedMatrix) <- make.names(colnames(AnnotatedMatrix))
AnnotatedMatrix$deceptive <- deceptive.opinion$deceptive
View(annotated_corpus)
View(AnnotatedMatrix)
taggedCorpus = VCorpus(VectorSource(deceptive.opinion$text))
taggedCorpus <- lapply(taggedCorpus, scan_tokenizer)
annotated_corpus <- lapply(taggedCorpus, annotateDocuments)
taggedCorpus = VCorpus(VectorSource(annotated_corpus))
AnnotatedMatrix <- as.data.frame(as.matrix(taggedCorpus))
View(AnnotatedMatrix)
colnames(AnnotatedMatrix) <- make.names(colnames(AnnotatedMatrix))
AnnotatedMatrix$deceptive <- deceptive.opinion$deceptive
library(udpipe)
View(AnnotatedMatrix)
AnnotatedMatrix <- as.data.frame(as.matrix(taggedCorpus))
View(AnnotatedMatrix)
colnames(AnnotatedMatrix) <- make.names(colnames(AnnotatedMatrix))
AnnotatedMatrix$deceptive <- deceptive.opinion$deceptive
AnnotatedMatrix <- as.data.frame(as.matrix(taggedCorpus))
View(AnnotatedMatrix)
colnames(AnnotatedMatrix) <- make.names(colnames(AnnotatedMatrix))
AnnotatedMatrix[-c(deceptive), ]
AnnotatedMatrix[-c(1601), ]
View(AnnotatedMatrix)
AnnotatedMatrix[-c(1601, ]
AnnotatedMatrix[-c(1601), ]
AnnotatedMatrix= AnnotatedMatrix[-c(1601), ]
View(AnnotatedMatrix)
View(AnnotatedMatrix)
taggedCorpus = VCorpus(VectorSource(deceptive.opinion$text))
taggedCorpus <- lapply(taggedCorpus, scan_tokenizer)
annotated_corpus <- lapply(taggedCorpus, annotateDocuments)
taggedCorpus = VCorpus(VectorSource(annotated_corpus))
AnnotatedMatrix <- as.data.frame(as.matrix(taggedCorpus))
View(AnnotatedMatrix)
colnames(AnnotatedMatrix) <- make.names(colnames(AnnotatedMatrix))
AnnotatedMatrix <- as.data.frame(as.matrix(taggedCorpus))
View(AnnotatedMatrix)
View(AnnotatedMatrix)
#model <- udpipe_download_model(language = "english")
udmodel_english <- udpipe_load_model(file = 'english-ud-2.0-170801.udpipe')
model <- udpipe_download_model(language = "english")
udmodel_english <- udpipe_load_model(file = 'english-ud-2.0-170801.udpipe')
s <- udpipe_annotate(udmodel_english, deceptive.opinion$text)
model <- udpipe_download_model(language = "english")
udmodel_english <- udpipe_load_model(file = 'english-ud-2.0-170801.udpipe')
ud_model <- udpipe_download_model(language = "english")
ud_model <- udpipe_load_model(ud_model$file_model)
udmodel_english <- udpipe_load_model(file = 'english-ud-2.0-170801.udpipe')
x <- udpipe_annotate(ud_model, s)
x <- udpipe_annotate(ud_model,deceptive.opinion$text )
View(x)
x[["conllu"]]
library(udpipe)
library(openNLPdata)
library(qdap)
library(wordcloud)
library(tokenizers)
library(tm)
library(SnowballC)
library(gamlr)
library(dplyr)
library(openNLP)
library(glm2)
library(tidyr)
library(tm)
library(tidyselect)
library(tokenizers)
library(wordcloud)
library(dplyr)
library(topicmodels)
library(dplyr)
s <- udpipe_annotate(ud_model, deceptive.opinion$text)
model <- udpipe_download_model(language = "english")
library(udpipe)
library(openNLPdata)
library(qdap)
library(wordcloud)
library(tokenizers)
library(tm)
library(SnowballC)
library(gamlr)
library(dplyr)
library(openNLP)
library(glm2)
library(tidyr)
library(tm)
library(tidyselect)
library(tokenizers)
library(wordcloud)
library(dplyr)
library(topicmodels)
library(dplyr)
if (file.exists("english-ud-2.0-170801.udpipe"))
ud_model <- udpipe_load_model(file = "english-ud-2.0-170801.udpipe") else {
ud_model <- udpipe_download_model(language = "english")
ud_model <- udpipe_load_model(ud_model$file_model)
}
x <- udpipe_annotate(ud_model, deceptive.opinion$text)
x <- as.data.frame(x)
table(x$upos)
load("~/FYP_LR_Prototype/.RData")
View(deceptiveRev)
dx <- udpipe_annotate(ud_model, deceptiveRev$text)
dx <- as.data.frame(dx)
library(dplyr)
library(topicmodels)
library(dplyr)
library(wordcloud)
library(tokenizers)
library(tidyselect)
library(tm)
library(tidyr)
library(glm2)
library(openNLP)
library(dplyr)
library(gamlr)
library(SnowballC)
library(tm)
library(tokenizers)
library(wordcloud)
library(qdap)
library(openNLPdata)
library(udpipe)
library(dplyr)
if (file.exists("english-ud-2.0-170801.udpipe"))
ud_model <- udpipe_load_model(file = "english-ud-2.0-170801.udpipe") else {
ud_model <- udpipe_download_model(language = "english")
ud_model <- udpipe_load_model(ud_model$file_model)
}
dx <- udpipe_annotate(ud_model, deceptiveRev$text)
dx <- as.data.frame(dx)
table(dx$upos)
tx <- udpipe_annotate(ud_model, TruthfulRev$text)
tx <- as.data.frame(tx)
table(tx$upos)
library(ggplot2)
View(dx)
View(dx)
table(x$sentence_id, x$upos)
table(dx$sentence_id, dx$upos)
table(dx$paragraph_id, dx$upos)
load("~/FYP_LR_Prototype/.RData")
savehistory("~/FYP_LR_Prototype/fyp 3.Rhistory")
if (file.exists("english-ud-2.0-170801.udpipe"))
ud_model <- udpipe_load_model(file = "english-ud-2.0-170801.udpipe") else {
ud_model <- udpipe_download_model(language = "english")
ud_model <- udpipe_load_model(ud_model$file_model)
}
x <- udpipe_annotate(ud_model, deceptive.opinion$text)
x <- as.data.frame(x)
library(lattice)
stats <- txt_freq(x$upos)
stats$key <- factor(stats$key, levels = rev(stats$key))
barchart(key ~ freq, data = stats, col = "cadetblue",
main = "UPOS (Universal Parts of Speech)\n frequency of occurrence",
xlab = "Freq")
library(lattice)
stats <- txt_freq(dx$upos)
stats$key <- factor(stats$key, levels = rev(stats$key))
barchart(key ~ freq, data = stats, col = "cadetblue",
main = "UPOS (Universal Parts of Speech for deceptive)\n frequency of occurrence",
xlab = "Freq")
library(lattice)
stats <- txt_freq(tx$upos)
stats$key <- factor(stats$key, levels = rev(stats$key))
barchart(key ~ freq, data = stats, col = "cadetblue",
main = "UPOS (Universal Parts of Speech for truthful)\n frequency of occurrence",
xlab = "Freq")
table(dx$upos)
table(tx$upos)
stats <- subset(dx, upos %in% c("NOUN"))
stats <- txt_freq(stats$token)
stats$key <- factor(stats$key, levels = rev(stats$key))
barchart(key ~ freq, data = head(stats, 20), col = "cadetblue",
main = "Most occurring nouns", xlab = "Freq")
stats <- subset(dx, upos %in% c("NOUN"))
stats <- txt_freq(stats$token)
stats$key <- factor(stats$key, levels = rev(stats$key))
barchart(key ~ freq, data = head(stats, 20), col = "cadetblue",
main = "Most occurring nouns in deceptive", xlab = "Freq")
stats <- subset(tx, upos %in% c("NOUN"))
stats <- txt_freq(stats$token)
stats$key <- factor(stats$key, levels = rev(stats$key))
barchart(key ~ freq, data = head(stats, 20), col = "cadetblue",
main = "Most occurring nouns in truthful", xlab = "Freq")
stats <- subset(tx, upos %in% c("VERB"))
stats <- txt_freq(stats$token)
stats$key <- factor(stats$key, levels = rev(stats$key))
barchart(key ~ freq, data = head(stats, 20), col = "cadetblue",
main = "Most occurring verbs in truthful", xlab = "Freq")
stats <- subset(dx, upos %in% c("VERB"))
stats <- txt_freq(stats$token)
stats$key <- factor(stats$key, levels = rev(stats$key))
barchart(key ~ freq, data = head(stats, 20), col = "cadetblue",
main = "Most occurring verbs deceptive", xlab = "Freq")
stats <- subset(dx, upos %in% c("PUNCT"))
stats <- txt_freq(stats$token)
stats$key <- factor(stats$key, levels = rev(stats$key))
barchart(key ~ freq, data = head(stats, 20), col = "cadetblue",
main = "Most occurring Punctuation in deceptive", xlab = "Freq")
stats <- subset(tx, upos %in% c("PUNCT"))
stats <- txt_freq(stats$token)
stats$key <- factor(stats$key, levels = rev(stats$key))
barchart(key ~ freq, data = head(stats, 20), col = "cadetblue",
main = "Most occurring Punctuation in truthful", xlab = "Freq")
PosTestcorpus <- VCorpus(VectorSource(deceptive.opinion$text))
PosTestcorpus <- tm_map(PosTestcorpus, FUN=function(txt){
data <- udpipe(content(txt), "english")
data <- subset(data, upos %in% c("PROPN", "NOUN", "ADJ"))
paste(data$lemma, collapse = " ")
})
View(PosTestcorpus)
View(PosTestcorpus)
PosTestcorpus <- tm_map(PosTestcorpus, PlainTextDocument)
View(PosTestcorpus)
posdtm = DocumentTermMatrix(PosTestcorpus)
dtm
View(posdtm)
posdtm[["dimnames"]][["Terms"]]
posdtm[["dimnames"]][["Docs"]]
stats <- subset(tx, upos %in% c("ADJ"))
stats <- txt_freq(stats$token)
stats$key <- factor(stats$key, levels = rev(stats$key))
barchart(key ~ freq, data = head(stats, 20), col = "cadetblue",
main = "Most occurring Adjectives in truthful", xlab = "Freq")
stats <- subset(dx, upos %in% c("ADJ"))
stats <- txt_freq(stats$token)
stats$key <- factor(stats$key, levels = rev(stats$key))
barchart(key ~ freq, data = head(stats, 20), col = "cadetblue",
main = "Most occurring Adjectives in deceptive", xlab = "Freq")
table(x$doc_id, x$upos)
train2=testCorpus2[train_ind,]
test2=testCorpus2[-train_ind,]
StandardRModel2 = glm(deceptive ~ ., data=train2, family="binomial")
PredictSRM2 = predict(stand, newdata=test2, type="response")
table(test2$deceptive, PredictSRM2 > 0.5)
train2=testCorpus2[train_ind,]
test2=testCorpus2[-train_ind,]
StandardRModel2 = glm(deceptive ~ ., data=train2, family="binomial")
PredictSRM2 = predict(StandardRModel2, newdata=test2, type="response")
table(test2$deceptive, PredictSRM2 > 0.5)
View(testCorpus2)
PosTestcorpus <- VCorpus(VectorSource(deceptive.opinion$text))
PosTestcorpus <- tm_map(PosTestcorpus, FUN=function(txt){
data <- udpipe(content(txt), "english")
data <- subset(data, upos %in% c("PROPN", "NOUN", "ADJ"))
paste(data$lemma, collapse = " ")
})
posdtm = DocumentTermMatrix(PosTestcorpus)
PosTestcorpus <- tm_map(PosTestcorpus, PlainTextDocument)
PosTestcorpus <- VCorpus(VectorSource(deceptive.opinion$text))
PosTestcorpus <- tm_map(PosTestcorpus, FUN=function(txt){
data <- udpipe(content(txt), "english")
data <- subset(data, upos %in% c("PROPN", "NOUN", "ADJ"))
paste(data$lemma, collapse = " ")
})
View(PosTestcorpus)
rake <- keywords_rake(x = textframe, term = "lemma", group = "doc_id",
relevant = x$upos %in% c("NOUN", "ADJ"))
rake$key <- factor(rake$keyword, levels = rev(rake$keyword))
barchart(key ~ rake, data = head(subset(rake, freq > 3), 20), col = "red",
main = "Keywords identified by RAKE",
xlab = "Rake")
View(amazon_reviews)
rm(amazon_reviews)
amazon_reviews <- read.delim("~/FYP_LR_Prototype/amazon_reviews.txt")
View(amazon_reviews)
View(a2)
a2[[5]][[1]][[1]]
a2[[5]]
a2
View(annotated_corpus)
View(annotationText)
library(qdap)
qdapPostext = pos(deceptive.opinion$text)
library(qdap)
qdapPostext = pos(deceptive.opinion$text)
install.packages("rJava")
library(qdap)
library(qdap)
library(dplyr)
library(topicmodels)
library(dplyr)
library(wordcloud)
library(tokenizers)
library(tidyselect)
library(tm)
library(tidyr)
library(glm2)
library(openNLP)
library(dplyr)
library(gamlr)
library(SnowballC)
library(tm)
library(tokenizers)
library(wordcloud)
library(qdap)
library(openNLPdata)
library(udpipe)
library(dplyr)
qdapPostext = pos(deceptive.opinion$text)
qdapPostext
View(PosTestcorpus)
PosTestcorpus[["content"]]
PosTestcorpus[["content"]]
qdapdtm = DocumentTermMatrix(qdapPostext)
qdapdtm = as.dtm(as.wfm(t(PosTestcorpus))
)
View(PosTestcorpus)
View(qdapPostext)
qdapPostext[["POSfreq"]]
qdapdtm = as.dtm(as.wfm(t(qdapPostext))
)
qdapPostext[["text"]]
qdaptokentext <- lapply(deceptive.opinion$text, scan_tokenizer)
View(qdaptokentext)
qdapPostext = pos(qdaptokentext)
View(BStest)
View(qdapPostext)
qdapPostext[["text"]]
qdapPostext[["POSfreq"]]
library(qdap)
library(qdap)
library(dplyr)
library(topicmodels)
library(dplyr)
library(wordcloud)
library(tokenizers)
library(tidyselect)
library(tm)
library(tidyr)
library(glm2)
library(openNLP)
library(dplyr)
library(gamlr)
library(SnowballC)
library(tm)
library(tokenizers)
library(wordcloud)
library(qdap)
library(openNLPdata)
library(udpipe)
library(dplyr)
View(qdapPostext)
View(x)
posframe = data.frame()
qdapPostext = pos(spdtm)
data <- subset(data, upos %in% c("PROPN", "NOUN", "ADJ"))
View(qdapPostext)
qdapPostext[["POSfreq"]]
qdapPostext[["text"]]
spdtm
View(spdtm)
qdaptokentext = pos(spdtm$dimnames)
if (file.exists("english-ud-2.0-170801.udpipe"))
ud_model <- udpipe_load_model(file = "english-ud-2.0-170801.udpipe") else {
ud_model <- udpipe_download_model(language = "english")
ud_model <- udpipe_load_model(ud_model$file_model)
}
data <- subset(data, upos %in% c("PROPN", "NOUN", "ADJ"))
View(x)
View(x)
x$doc_id
table(dx$upos)
x$upos
xtoken %>% select(token, upos)
x %>% select(token, upos)
x %>% select(doc_id, token)
x %>% select(doc_id, NNS)
dtm1 <- document_term_frequencies(x)
View(dtm1)
dtm1 <- document_term_frequencies(x)
dtm1 <- DocumentTermMatrix(x)
dtm1 <- document_term_frequencies_statistics(x)
dtm1 <- document_term_frequencies(x)
dtm1 <- document_term_frequencies_statistics(x)
dtm1 <- document_term_frequencies_statistics(dtm1)
View(dtm1)
dtm1 <- document_term_frequencies(x,document = colnames("doc_id"))
dtm1
View(dtm1)
dtm1 <- document_term_frequencies(x,document = colnames("1"))
View(dtm1)
dtm1 <- document_term_matrix(x)
dtm1 <- document_term_matrix(x,vocabulary, weight = "freq")
x <- document_term_frequencies(x[, c("doc_id", "lemma")])
View(x)
x <- udpipe_annotate(ud_model, deceptive.opinion$text)
x <- as.data.frame(x)
xdtm <- document_term_frequencies(x[, c("doc_id", "lemma")])
View(xdtm)
xdtm <- document_term_frequencies(x[, c("doc_id", "lemma", "upos")])
View(xdtm)
xdtm <- document_term_frequencies(x[, c("doc_id", "lemma", "upos")])
View(xdtm)
xdtm <- document_term_matrix(xdtm)
View(xdtm)
xdtm@Dimnames[[1]]
xdtm@Dimnames[[2]]
xdtm@x
xdtm
xdtm2 <- document_term_frequencies(x[, c("doc_id", "upos")])
View(xdtm2)
xdtm2 <- document_term_matrix(xdtm2)
View(xdtm2)
View(xdtm2)
View(xdtm)
View(xdtm2)
xdtm2@x
xdtm2@Dimnames
xdtm <- document_term_frequencies(brussels_reviews_anno[, c("doc_id", "token")])
xdtm <- document_term_frequencies(x[, c("doc_id", "token")])
View(xdtm)
xdtm <- document_term_matrix(xdtm)
View(xdtm)
xdtm@Dimnames[[2]]
dim(xdtm)
xdtm <- dtm_remove_sparseterms(xdtm, sparsity = 0.90)
dim(xdtm)
View(xdtm)
xdtm@Dimnames
View(xdtm)
PoScorpus <- as.data.frame(as.matrix(xdtm))
view(PoScorpus)
View(PoScorpus)
PoScorpus <- PoScorpus[ -c(1,2,3,5,6,7,8,9,10) ]
view(PoScorpus)
View(PoScorpus)
xdtmstopwordrm <- tm_map(xdtm,removeWords,stopwords("en"))
dtf <- subset(x, upos %in% c("NOUN","VERB","ADJ","PUNCT"))
View(dtf)
xdtm <- document_term_frequencies(dtf[, c("doc_id", "token")])
View(xdtm)
xdtm <- document_term_matrix(xdtm)
xdtm <- dtm_remove_sparseterms(xdtm, sparsity = 0.90)
PoScorpus <- as.data.frame(as.matrix(xdtm))
View(PoScorpus)
PoScorpus <- PoScorpus[ -c(1,2,4,5,6,7) ]
View(PoScorpus)
sort(colSums(PoScorpus))
PoScorpus$deceptive <- deceptive.opinion$deceptive
View(PoScorpus)
View(annotated_corpus)
rm(a2)
View(annotated_corpus)
View(AnnotatedMatrix)
View(annotationText)
rm(annotationText)
train2=PoScorpus[train_ind,]
test2=PoScorpus[-train_ind,]
StandardRModel2 = glm(deceptive ~ ., data=train2, family="binomial")
PredictSRM2 = predict(StandardRModel2, newdata=test2, type="response")
summary(StandardRModel2)
table(test2$deceptive, PredictSRM2 > 0.5)
View(testCorpus)
cleaned_corpus <- as.data.frame(as.matrix(corpus))
View(testCorpus)
savehistory("~/FYP_LR_Prototype/History.Rhistory")
